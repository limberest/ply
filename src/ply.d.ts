/** Declaration file generated by dts-gen */

export class Request implements Plyable {
    group: string;
    name: string;
    url: string;
    method: string;
    headers: object | undefined;
    body: string | undefined;

    /**
     * Execute this test.
     * @param options test case options
     * @param values values to apply
     * @param name optional name of run
     * @returns response
     */
    run(options: object, values: object, name: string | undefined): Promise<Response>;
    /**
     * Verify vs conventional expected response.
     */
    verify: (values: object) => Result;
    verifyAsync: (values: object) => Promise<Result>;
    /**
     * Verify vs supplied expected response.
     */
    verifyResult: (expected: string, values: object) => Result;
    /**
     * Returns a serializable request object for comparison.
     * @param values
     */
    getRequest(values: object): {
        url: string;
        method: string;
        headers: object | undefined;
        body: string | undefined;
    };
    /**
     * Get or set body as object.
     */
    json(body: object | undefined): object | undefined;
}

export class Case implements Plyable {
    constructor(name: string, options: object);
    init(qualifier: string | undefined): void;

    name: string;

    /**
     * Execute this test.
     * @param options test case options
     * @param values values to apply
     * @param name optional name of run
     * @returns response
     */
    run(request: Request, values: object, name: string | undefined): Promise<Response>;
    /**
     * Verify vs conventional expected response.
     */
    verify(values: object): Result;
    verifyAsync(values: object): Promise<Result>;
    /**
     * Verify vs supplied expected response.
     */
    verifyResult(expected: string, values: object): Result;

    handleError(error: Error): void;
    jsonString(obj: object): string;
    yamlString(obj: object): string;
}

export interface Plyable {

    name: string;

    /**
     * Execute this plyable.
     * @param options test case options
     * @param values values to apply
     * @param name optional name of run
     * @returns response
     */
    run(request: Request, values: object, name: string | undefined): Promise<Response>;

    /**
     * Verify vs conventional expected response.
     */
    verify(values: object): Result;
    verifyAsync(values: object): Promise<Result>;
    /**
     * Verify vs supplied expected response.
     */
    verifyResult(expected: string, values: object): Result;
}

export class Response {
    /**
     * Response time in ms.
     */
    time: number;
    status: Status;
    headers: object | undefined;
    body: string | undefined;
}

/**
 * HTTP response status.
 */
export class Status {
    code: number;
    message: string;
}

export class Result {
    status: 'Passed' | 'Failed' | 'Errored';
    message: string;
}

export type Requests = {
    [key: string]: Request
}
/**
 * Loads requests from a resource synchronously unless location is a url.
 * @param location file path or a url
 */
export function loadRequests(location: string): Requests | Promise<Requests>;
/**
 * Load requests asynchronously (from a url or a file).
 * @param location file path or url
 */
export function loadRequestsAsync(location: any): Promise<Requests>;

export type Cases = {
    [key: string]: Case
}
/**
 * Loads cases from a resource synchronously unless location is a url.
 * @param location file path or a url
 */
export function loadCases(location: string): Cases | Promise<Cases>;
/**
 * Load cases asynchronously (from a url or a file).
 * @param location file path or url
 */
export function loadCasesAsync(location: any): Promise<Cases>;

/**
 * Load a values object for test substitution.
 * @param location file path or url of straight JSON file or Postman values file
 */
export function loadValues(location: string): object | Promise<object>;
/**
 * Load a values object for test substitution.
 * @param location file path or url of straight JSON file or Postman values file
 */
export function loadValuesAsync(options: object, paths: string[]): Promise<Object>;

/**
 * Load requests from a Postman collection.
 * @param location file path or url
 */
export function loadCollection(location: string): Requests | Promise<Requests>;
/**
 * Load requests from a Postman collection.
 * @param location file path or url
 */
export function loadCollectionAsync(location: string): Promise<Requests>;

export class Logger {
    constructor(options: any);

    debug(message: any, obj: any): void;

    error(message: any, obj: any): void;

    info(message: any, obj: any): void;

    log(level: any, message: any, obj: any): void;

    toString(): any;

}

export class Retrieval {
    constructor(location: any, name: any);

    isUrl(location: any): any;

    load(): any;

    loadAsync(callback: any): any;

    toString(): any;

}

export class Storage {
    constructor(location: any, name: any);

    append(value: any): void;

    exists(): any;

    getMatches(options: any, callback: any): any;

    read(callback: any): any;

    remove(): void;

    toString(): any;

    write(value: any): void;

}

export class GitHub {
    constructor(url: any, branch: any);

    commitAndPush(token: any, file: any, message: any, callback: any): any;

    get(file: any, callback: any): void;

    getMatches(options: any, callback: any): any;

    toString(): any;

}

// internal APIs
export function loadAllCollectionsAsync(options: object): Promise<any[]>;
export function constructGroup(options: any, group: any): void;
export function createFile(options: any, file: any): void;
export function createGroup(location: any, from: any): any;
export function createRequest(options: any, groupName: any, request: any): void;
export function discardExpectedResult(options: any, groupName: any, request: any): void;
export function discardFile(options: any, file: any): any;
export function discardRequest(options: any, groupName: any, request: any): any;
export function fileHasLocal(options: any, path: any): any;

export function getLogger(options: any): any;
export function getRequest(): any;
export function getResourceName(method: any, name: any, ext: any): any;
export function loadActual(path: any, resName: any, options: any): any;

export function loadExpected(options: any, groupName: any, request: any): any;
export function loadFile(location: any): any;
export function loadFileAsync(options: any, path: any): any;
export function loadFiles(options: any): any;

export function loadLog(path: any, resName: any, options: any): any;
export function loadRequestActual(groupName: any, method: any, name: any, options: any): any;
export function loadRequestLog(groupName: any, method: any, name: any, options: any): any;

export function refreshFile(location: any): any;
export function saveExpectedResult(options: any, token: any, groupName: any, request: any, result: any, message: any): any;
export function saveFile(options: any, token: any, file: any, message: any): any;
export function saveRequest(options: any, token: any, groupName: any, request: any, message: any): any;
export function syncGroup(options: any, group: any): void;

export function updateExpectedResult(options: any, groupName: any, request: any, result: any): void;
export function updateFile(options: any, file: any): void;
export function updateRequest(options: any, groupName: any, request: any): void;

export namespace compare {
    function diffLines(expected: any, actual: any, values: any, options: any): any;

    function getMarkers(diffs: any, lines: any): any;

    function markIgnored(diffs: any, values: any): any;

    function markLines(start: any, lines: any, ignored: any): any;

    function mirrorDiffs(diffs: any): any;
}

export namespace postman {
    function createBody(request: any): any;

    function createHeader(request: any): any;

    function createRequest(request: any): any;

    function createUrl(request: any): any;

    function group(collectionObj: any): any;

    function isCollection(obj: any): any;

    function isEnv(obj: any): any;

    function replaceExpressions(str: any): any;

    function replaceLiterals(str: any): any;

    function setRequest(collection: any, request: any): any;

    function values(envObj: any): any;

}

export namespace subst {
    function extractCode(lineObjs: any, withComments: any): any;

    function prefix(str: any, pre: any, codeLines: any, start: any): any;

    function replace(template: any, map: any, fallback: any): any;

    function trimComments(code: any): any;

}

